#!/usr/bin/env node

"use strict";

// Module dependencies.
import { error as _error, info, debug } from '../lib/logger.js';
import { createServer } from 'http';
import { createServer as _createServer } from 'https';
import { readFileSync } from 'fs';
import app from '../app.js';
import settings from '../settings.js';

// Get port from environment and store in Express.
const port = normalizePort(settings.port || '3000');
app.set('port', port);

// Create HTTP server.
let server;

if (settings.https) {
  var options = {};
  if (settings.https.pfx) {
    options.pfx = readFileSync(settings.https.pfx);
    options.passphrase = settings.https.passphrase;
  } else if (settings.https.key && settings.https.cert) {
    options.key = readFileSync(settings.https.key);
    options.cert = readFileSync(settings.https.cert);
  } else {
    _error("Insufficient configuration for https");
  }

  const secureServer = _createServer(options, app);
  secureServer.listen(securePort, function() {
    info('https server listening on port', securePort);
  });
}

server = createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

process.on('unhandledRejection', (err) => {
  _error(err);
});
